/**
 * \file   gmake_project_tests.cpp
 * \brief  Automated tests for GNU makefile project processing.
 * \author Copyright (c) 2008 Jason Perkins and the Premake project
 */

#include "premake.h"
#include "action/tests/action_tests.h"
extern "C" {
#include "action/make/make_project.h"
}

SUITE(action)
{
	TEST_FIXTURE(FxAction, MakeProject_Signature)
	{
		make_project_signature(sess, prj, strm);
		CHECK_EQUAL(
			"# GNU Makefile autogenerated by Premake\n"
			"\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_Conditional)
	{
		make_project_config_conditional(sess, prj, strm);
		CHECK_EQUAL(
			"ifeq ($(CONFIG),Debug)\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_End)
	{
		make_project_config_end(sess, prj, strm);
		CHECK_EQUAL(
			"endif\n"
			"\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_CFlags)
	{
		make_project_config_cflags(sess, prj, strm);
		CHECK_EQUAL(
			"   CFLAGS += $(CPPFLAGS) $(ARCHFLAGS)\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_CppFlags)
	{
		make_project_config_cppflags(sess, prj, strm);
		CHECK_EQUAL(
			"   CPPFLAGS += -MMD\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_CxxFlags)
	{
		make_project_config_cxxflags(sess, prj, strm);
		CHECK_EQUAL(
			"   CXXFLAGS += $(CFLAGS)\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_LdDeps)
	{
		make_project_config_lddeps(sess, prj, strm);
		CHECK_EQUAL(
			"   LDDEPS :=\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_LdFlags)
	{
		make_project_config_ldflags(sess, prj, strm);
		CHECK_EQUAL(
			"   LDFLAGS +=\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_ObjDir)
	{
		make_project_config_objdir(sess, prj, strm);
		CHECK_EQUAL(
			"   OBJDIR := obj/Debug\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_OutFile)
	{
		make_project_config_outfile(sess, prj, strm);
		CHECK_EQUAL(
			"   OUTFILE := MyApp\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_OutDir)
	{
		make_project_config_outdir(sess, prj, strm);
		CHECK_EQUAL(
			"   OUTDIR := .\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Config_ResFlags)
	{
		make_project_config_resflags(sess, prj, strm);
		CHECK_EQUAL(
			"   RESFLAGS +=\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Objects)
	{
		make_project_objects(sess, prj, strm);
		CHECK_EQUAL(
			"OBJECTS := \\\n"
			"\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_Resources)
	{
		make_project_resources(sess, prj, strm);
		CHECK_EQUAL(
			"RESOURCES := \\\n"
			"\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_PhonyRule)
	{
		make_project_phony_rule(sess, prj, strm);
		CHECK_EQUAL(
			".PHONY: clean\n"
			"\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_OutputTarget)
	{
		make_project_target(sess, prj, strm);
		CHECK_EQUAL(
			"$(OUTDIR)/$(OUTFILE): $(OBJECTS) $(LDDEPS) $(RESOURCES)\n"
			"\t@echo Linking MyProject\n"
			"\t$(CXX) -o $@ $(LDFLAGS) $(ARCHFLAGS) $(OBJECTS) $(RESOURCES)\n"
			"\n",
			buffer);
	}

	TEST_FIXTURE(FxAction, MakeProject_IncludeDependencies)
	{
		make_project_include_dependencies(sess, prj, strm);
		CHECK_EQUAL(
			"-include $(OBJECTS:%.o=%.d)\n",
			buffer);
	}
}
