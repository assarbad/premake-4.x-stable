<% 
	eol = "\r\n" 
	local csc = premake.csc

	--
	-- Figure out what elements a particular file need in its item block,
	-- based on its build action and any related files in the project.
	-- 
	
	function getelements(prj, action, fname)
	
		if action == "Compile" and fname:endswith(".cs") then
			return "SubTypeCode"
		end

		if action == "EmbeddedResource" and fname:endswith(".resx") then
			-- is there a matching *.cs file?
			local basename = fname:sub(1, -6)
			local testname = path.getname(basename .. ".cs")
			if premake.findfile(prj, testname) then
				return "Dependency", testname
			end
		end
		
		return "None"
	end

	-- end of preprocessing; template starts here --	
%>
<VisualStudioProject>
	<CSHARP
		ProjectType = "Local"
		ProductVersion = "<%= iif(_ACTION == "vs2002", "7.0.9254", "7.10.3077") %>"
		SchemaVersion = "<%= iif(_ACTION == "vs2002", "1.0", "2.0") %>"
		ProjectGuid = "{<%= this.uuid %>}"
	>
		<Build>
			<Settings
				ApplicationIcon = ""
				AssemblyKeyContainerName = ""
				AssemblyName = "<%= this.buildtarget.basename %>"
				AssemblyOriginatorKeyFile = ""
				DefaultClientScript = "JScript"
				DefaultHTMLPageLayout = "Grid"
				DefaultTargetSchema = "IE50"
				DelaySign = "false"
				<% if _ACTION == "vs2002" then %>
				NoStandardLibraries = "false"
				<% end %>
				OutputType = "<%= csc.getkind(this) %>"
				<% if _ACTION == "vs2003" then %>
				PreBuildEvent = ""
				PostBuildEvent = ""
				<% end %>
				RootNamespace = "<%= this.buildtarget.basename %>"
				<% if _ACTION == "vs2003" then %>
				RunPostBuildEvent = "OnBuildSuccess"
				<% end %>
				StartupObject = ""
			>
			<% for cfg in premake.eachconfig(this) do %>
				<Config
					Name = "<%= premake.esc(cfg.name) %>"
					AllowUnsafeBlocks = "<%= iif(cfg.flags.Unsafe, "true", "false") %>"
					BaseAddress = "285212672"
					CheckForOverflowUnderflow = "false"
					ConfigurationOverrideFile = ""
					DefineConstants = "<%= premake.esc(table.concat(cfg.defines, ";")) %>"
					DocumentationFile = ""
					DebugSymbols = "<%= iif(cfg.flags.Symbols, "true", "false") %>"
					FileAlignment = "4096"
					IncrementalBuild = "false"
					<% if _ACTION == "vs2003" then %>
					NoStdLib = "false"
					NoWarn = ""
					<% end %>
					Optimize = "<%= iif(cfg.flags.Optimize or cfg.flags.OptimizeSize or cfg.flags.OptimizeSpeed, "true", "false") %>"
					OutputPath = "<%= premake.esc(cfg.buildtarget.directory) %>"
					RegisterForComInterop = "false"
					RemoveIntegerChecks = "false"
					TreatWarningsAsErrors = "<%= iif(cfg.flags.FatalWarnings, "true", "false") %>"
					WarningLevel = "4"
				/>
			<% end %>
			</Settings>
			<References>
			<% for _, prj in ipairs(premake.getlinks(this, "siblings", "object")) do %>
				<Reference
					Name = "<%= prj.buildtarget.basename %>"
					Project = "{<%= prj.uuid %>}"
					Package = "{<%= _VS.tool(prj) %>}"
				/>
			<% end %>
			<% for _, linkname in ipairs(premake.getlinks(this, "system", "fullpath")) do %>
				<Reference
					Name = "<%= path.getbasename(linkname) %>"
					AssemblyName = "<%= path.getname(linkname) %>"
					<% if path.getdirectory(linkname) ~= "." then %>
					HintPath = "<%= path.translate(linkname, "\\") %>"
					<% end %>
				/>
			<% end %>
			</References>
		</Build>
		<Files>
			<Include>
			<%
			for fcfg in premake.eachfile(this) do
			  local action = csc.getbuildaction(fcfg)
			  local fname  = path.translate(premake.esc(fcfg.name), "\\")
			  local elements, dependency = getelements(this, action, fcfg.name)
			%>
				<File
					RelPath = "<%= premake.esc(fname) %>"
					BuildAction = "<%= action %>"
					<% if dependency then %>
					DependentUpon = "<%= premake.esc(path.translate(dependency, "\\")) %>"
					<% end %>
					<% if elements == "SubTypeCode" then %>
					SubType = "Code"
					<% end %>
				/>					
			<% end %>
			</Include>
		</Files>
	</CSHARP>
</VisualStudioProject>
