--
-- make_solution.lua
-- Generate a solution-level makefile.
-- Copyright (c) 2002-2009 Jason Perkins and the Premake project
--

	function premake.make_solution(sln)
		-- write a header showing the build options
		io.printf('# %s solution makefile autogenerated by Premake', premake.actions[_ACTION].shortname)
		io.printf('# Usage: make [ config=config_name ]')
		io.printf('# Where {config_name} is one of: %s.', table.implode(sln.configurations, '"', '"', ', '):lower())
		io.printf('')
		
		-- set a default configuration
		io.printf('ifndef config')
		io.printf('  config=%s', _MAKE.esc(sln.configurations[1]:lower()))
		io.printf('endif')
		io.printf('export config')
		io.printf('')

		-- list the projects included in the solution
		io.printf('PROJECTS := %s', table.concat(_MAKE.esc(table.extract(sln.projects, "name")), " "))
		io.printf('')
		io.printf('.PHONY: all clean $(PROJECTS)')
		io.printf('')
		io.printf('all: $(PROJECTS)')

		-- write the project build rules
		for _, prj in ipairs(sln.projects) do
			for cfg in premake.eachconfig(prj) do
				io.printf('ifeq ($(config),%s)', _MAKE.esc(cfg.name:lower()))
				io.printf('  DEPENDENCIES := %s', table.concat(_MAKE.esc(table.extract(premake.getdependencies(cfg), "name")), " "))
				io.printf('endif')
			end
			io.printf('')
			
			io.printf('%s: ${DEPENDENCIES}', _MAKE.esc(prj.name))
			io.printf('\t@echo ==== Building %s ====', prj.name)
			io.printf('\t@${MAKE} --no-print-directory -C %s -f %s', _MAKE.esc(path.getrelative(sln.location, prj.location)), _MAKE.esc(_MAKE.getmakefilename(prj, true)))
			io.printf('')
		end

		-- clean rules
		io.printf('clean:')
		for _ ,prj in ipairs(sln.projects) do
			io.printf('	@${MAKE} --no-print-directory -C %s -f %s clean', _MAKE.esc(path.getrelative(sln.location, prj.location)), _MAKE.esc(_MAKE.getmakefilename(prj, true)))
		end
	end
