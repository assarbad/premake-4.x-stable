<% 
	local csc = premake.csc
	
	--
	-- Given a .resx resource file, builds the path to corresponding .resource
	-- file, matching the behavior and naming of Visual Studio.
	--
		
	function getresourcefilename(cfg, fname)
		if path.getextension(fname) == ".resx" then
		    local name = cfg.buildtarget.basename .. "."
		    local dir = path.getdirectory(fname)
		    if dir ~= "." then 
				name = name .. path.translate(dir, ".") .. "."
			end
			return "$(OBJDIR)/" .. name .. path.getbasename(fname) .. ".resources"
		else
			return fname
		end
	end

	
	-- Do some processing up front: build a list of configuration-dependent libraries.
	-- Libraries that are built to a location other than $(TARGETDIR) will need to
	-- be copied so they can be found at runtime.
	local cfglibs = { }
	local cfgpairs = { }
	local anycfg
	for cfg in premake.eachconfig(this) do
		anycfg = cfg
		cfglibs[cfg] = premake.getlinks(cfg, "siblings", "fullpath")
		cfgpairs[cfg] = { }
		for _, fname in ipairs(cfglibs[cfg]) do
			if path.getdirectory(fname) ~= cfg.buildtarget.directory then
				cfgpairs[cfg]["$(TARGETDIR)/"..path.getname(fname)] = fname
			end
		end
	end
	
	-- sort the files into categories, based on their build action
	local sources = {}
	local embedded = { }
	local copypairs = { }
	
	for fcfg in premake.eachfile(this) do
		local action = csc.getbuildaction(fcfg)
		if action == "Compile" then
			table.insert(sources, fcfg.name)
		elseif action == "EmbeddedResource" then			
			table.insert(embedded, fcfg.name)
		elseif action == "Content" then
			copypairs["$(TARGETDIR)/"..path.getname(fcfg.name)] = fcfg.name
		elseif path.getname(fcfg.name):lower() == "app.config" then
			copypairs["$(TARGET).config"] = fcfg.name	
		end
	end

	-- Any assemblies that are on the library search paths should be copied
	-- to $(TARGETDIR) so they can be found at runtime
	local paths = table.translate(this.libdirs, function(v) return path.join(this.basedir, v) end)
	paths = table.join({this.basedir}, paths)
	for _, libname in ipairs(premake.getlinks(this, "system", "fullpath")) do
		local libdir = os.pathsearch(libname..".dll", unpack(paths))
		if (libdir) then
			local target = "$(TARGETDIR)/"..path.getname(libname)
			local source = path.getrelative(this.basedir, path.join(libdir, libname))..".dll"
			copypairs[target] = source
		end
	end
	
	-- end of preprocessing --
	
%>
# <%= premake.actions[_ACTION].shortname %> project makefile autogenerated by Premake

ifndef config
  config=<%= _MAKE.esc(this.configurations[1]) %>
endif

ifndef verbose
  SILENT = @
endif

ifndef CSC
  CSC=<%= csc.getcompilervar(this) %>
endif

ifndef RESGEN
  RESGEN=resgen
endif


<% for cfg in premake.eachconfig(this) do %>
ifeq ($(config),<%= _MAKE.esc(cfg.name)%>)
  TARGETDIR  := <%= _MAKE.esc(cfg.buildtarget.directory) %>
  OBJDIR     := <%= _MAKE.esc(cfg.objectsdir) %>
  DEPENDS    := <%= table.concat(_MAKE.esc(premake.getlinks(cfg, "dependencies", "fullpath")), " ") %>
  REFERENCES := <%= table.implode(_MAKE.esc(cfglibs[cfg]), "/r:", "", " ") %>
  FLAGS      += <%= table.concat(csc.getflags(cfg), " ") %> <%= table.implode(cfg.defines, "/d:", "", " ") %>
  define PREBUILDCMDS
    <% if #cfg.prebuildcommands > 0 then %>
	@echo Running pre-build commands
	<%= table.implode(cfg.prebuildcommands, "", "", "\n\t") %>
    <% end %>
  endef
  define PRELINKCMDS
    <% if #cfg.prelinkcommands > 0 then %>
	@echo Running pre-link commands
	<%= table.implode(cfg.prelinkcommands, "", "", "\n\t") %>
    <% end %>
  endef
  define POSTBUILDCMDS
    <% if #cfg.postbuildcommands > 0 then %>
	@echo Running post-build commands
	<%= table.implode(cfg.postbuildcommands, "", "", "\n\t") %>
    <% end %>
  endef
endif
<%	end %>

# To maintain compatibility with VS.NET, these values must be set at the project level
TARGET      = $(TARGETDIR)/<%= _MAKE.esc(this.buildtarget.name) %>
FLAGS      += /t:<%= csc.getkind(this):lower() %> <%= table.implode(_MAKE.esc(this.libdirs), "/lib:", "", " ") %>
REFERENCES += <%= table.implode(_MAKE.esc(premake.getlinks(this, "system", "basename")), "/r:", ".dll", " ") %>


SOURCES := \
<% for _, fname in ipairs(sources) do %>
	<%= _MAKE.esc(path.translate(fname)) %> \
<% end %>

EMBEDFILES := \
<% for _, fname in ipairs(embedded) do %>
	<%= _MAKE.esc(getresourcefilename(this, fname)) %> \
<% end %>

COPYFILES += \
<% for target, source in pairs(cfgpairs[anycfg]) do %>
	<%= _MAKE.esc(target) %> \
<% end %>
<% for target, source in pairs(copypairs) do %>
	<%= _MAKE.esc(target) %> \
<% end %>


SHELLTYPE := msdos
ifeq (,$(ComSpec)$(COMSPEC))
  SHELLTYPE := posix
endif
ifeq (/bin,$(findstring /bin,$(SHELL)))
  SHELLTYPE := posix
endif

ifeq (posix,$(SHELLTYPE))
  define MKDIR_RULE
	@echo Creating $@
	$(SILENT) mkdir -p $@
  endef
  define COPY_RULE
	@echo Copying $(notdir $@)
	$(SILENT) cp -fR $^ $@
  endef	
else
  define MKDIR_RULE
	@echo Creating $@
	$(SILENT) mkdir $(subst /,\\,$@)
  endef
  define COPY_RULE
	@echo Copying $(notdir $@)
	$(SILENT) copy /Y $(subst /,\\,$^) $(subst /,\\,$@)
  endef	
endif


.PHONY: clean prebuild prelink

all: $(TARGET) $(COPYFILES)

$(TARGET): $(TARGETDIR) $(OBJDIR) prebuild $(SOURCES) $(EMBEDFILES) $(DEPENDS) prelink
	$(SILENT) $(CSC) /nologo /out:$@ $(FLAGS) $(REFERENCES) $(SOURCES) $(patsubst %,/resource:%,$(EMBEDFILES))
	$(POSTBUILDCMDS)

$(TARGETDIR):
	$(MKDIR_RULE)
	
$(OBJDIR):
	$(MKDIR_RULE)

clean:
	@echo Cleaning <%= this.name %>
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f $(TARGETDIR)/<%= this.buildtarget.basename %>.* $(COPYFILES)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGETDIR)/<%= this.buildtarget.basename %>.*) del $(subst /,\\,$(TARGETDIR)/<%= this.buildtarget.basename %>.*)
	<% for target, source in pairs(cfgpairs[anycfg]) do %>
	$(SILENT) if exist $(subst /,\\,<%= target %>) del $(subst /,\\,<%= target %>)
	<% end %>
	<% for target, source in pairs(copypairs) do %>
	$(SILENT) if exist $(subst /,\\,<%= target %>) del $(subst /,\\,<%= target %>)
	<% end %>
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild:
	$(PREBUILDCMDS)
	
prelink:
	$(PRELINKCMDS)


# Per-configuration copied file rules 
<% for cfg in premake.eachconfig(this) do %>	
ifeq ($(config),<%= _MAKE.esc(cfg.name)%>)
<% for target, source in pairs(cfgpairs[cfg]) do %>
<%= _MAKE.esc(target) %>: <%= _MAKE.esc(source) %>
	$(COPY_RULE)
<% end %>
endif
<% end %>

# Copied file rules
<% for target, source in pairs(copypairs) do %>
<%= _MAKE.esc(target) %>: <%= _MAKE.esc(source) %>
	$(COPY_RULE)
<% end %>
	
# Embedded file rules
<% for _, fname in ipairs(embedded) do if path.getextension(fname) == ".resx" then %>
<%= _MAKE.esc(getresourcefilename(this, fname)) %>: <%= _MAKE.esc(fname) %>
	$(SILENT) $(RESGEN) $^ $@
<% end end %>
